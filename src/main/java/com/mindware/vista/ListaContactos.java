package com.mindware.vista;

import com.mindware.domain.Contacto;
import com.mindware.services.ContactoService;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.shared.ui.MultiSelectMode;
import com.vaadin.ui.*;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;

import java.util.ArrayList;
import java.util.List;


@SuppressWarnings("serial")
public class ListaContactos extends CustomComponent{
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;
	@AutoGenerated
	private Table tbl_contactos;
	@AutoGenerated
	private GridLayout gridLayout_1;
	@AutoGenerated
	private NativeButton btnEditar;
	@AutoGenerated
	private NativeButton btnImportar;
	@AutoGenerated
	private NativeButton btnNuevoContacto;
	private Label titulo;
	private ContactoService contactoService;
	private NativeButton btnComponer;
	private ArrayList<String> listaCelulares;
//	private Grid grid_contactos;
	Window mainwindow;  // Reference to main window
	Window mywindow;    // The window to be opened
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ListaContactos()  {
		
		buildMainLayout();
		setCompositionRoot(mainLayout);

        btnNuevoContacto.addClickListener(new ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				AddContacto addContacto = new AddContacto();
				addContacto.setModal(true);
				addContacto.setWidth("600px");
				addContacto.setHeight("450px");
				addContacto.center();
				UI.getCurrent().addWindow(addContacto);

			}
		});	
        
        btnImportar.addClickListener(new ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				
				CargarArchivo cargarArchivo = new CargarArchivo();
				cargarArchivo.setModal(true);
				cargarArchivo.setWidth("700px");
				cargarArchivo.setHeight("700px");
				cargarArchivo.center();
				
				UI.getCurrent().addWindow(cargarArchivo);
				
			}
		});

		btnComponer.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				Window subWindowComponer = new Window("Componer Mensaje");
				Componer componerMensaje = new Componer();
				componerMensaje.numeroCelulares(celulares(listaCelulares));
				subWindowComponer.setContent(componerMensaje);
				subWindowComponer.center();
				subWindowComponer.setModal(true);
				subWindowComponer.setWidth("700px");
				UI.getCurrent().addWindow(subWindowComponer);


			}
		});

		//Llenar contactos
		contactoService = new ContactoService();
		llenarContactos(contactoService.findContactoByUser(1)); //TODO reemplazar 1 por el codigo de logeo del usuario
		seleccionarCelulares();


	}
	
	private void llenarContactos(List<Contacto> contactos) {
		if (contactos.size() >0) {

			IndexedContainer containerContacto = new IndexedContainer();

			containerContacto.addContainerProperty("Celular", String.class, "");
			containerContacto.addContainerProperty("Contacto", String.class, "");
			containerContacto.addContainerProperty("Campo1", String.class, "");
			containerContacto.addContainerProperty("Campo2", String.class, "");
			containerContacto.addContainerProperty("Campo3", String.class, "");

			for (Contacto contacto : contactos) {
				Item item = containerContacto.addItem(contacto);
				item.getItemProperty("Celular").setValue(contacto.getCelular());
				item.getItemProperty("Contacto").setValue(contacto.getNombreContacto());
				item.getItemProperty("Campo1").setValue(contacto.getCampo1());
				item.getItemProperty("Campo2").setValue(contacto.getCampo2());
				item.getItemProperty("Campo3").setValue(contacto.getCampo3());

			}
			tbl_contactos.setContainerDataSource(containerContacto);
		}
	}

	public void seleccionarCelulares() {
		listaCelulares = new ArrayList<String>(); //inicializa lista celulares seleccionados
		tbl_contactos.addItemClickListener(new ItemClickEvent.ItemClickListener() {
			@Override
			public void itemClick(ItemClickEvent event) {
//				String value = (String) event.getItem().getItemProperty("Celular").getValue();
				Object value = event.getItemId();
				Notification.show("Celular" + (String)tbl_contactos.getItem(value).getItemProperty("Celular").getValue());
				celularesSeleccionados((String)tbl_contactos.getItem(value).getItemProperty("Celular").getValue());
			}
		});
	}

	public void celularesSeleccionados(String celular){
		listaCelulares.add(celular);
		Object[] st = listaCelulares.toArray();
		for (Object s : st) {
			if (listaCelulares.indexOf(s) != listaCelulares.lastIndexOf(s)) {
				listaCelulares.remove(listaCelulares.lastIndexOf(s));
				listaCelulares.remove(listaCelulares.lastIndexOf(s));
			}
		}
	}


	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		titulo = new Label("Contactos");
		mainLayout.addComponent(titulo);
		// gridLayout_1
		gridLayout_1 = buildGridLayout_1();
		mainLayout.addComponent(gridLayout_1, "top:11.0px;right:13.0px;left:9.0px;");
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		mainLayout.addComponent(horizontalLayout_1, "top:79.0px;left:9.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_1() {

		// common part: create layout
		gridLayout_1 = new GridLayout();
		gridLayout_1.setImmediate(false);
		gridLayout_1.setWidth("100.0%");
		gridLayout_1.setHeight("50px");
		gridLayout_1.setMargin(false);
		gridLayout_1.setColumns(4);
		gridLayout_1.setRows(2);



		// btnNuevoContacto
		btnNuevoContacto = new NativeButton();
		btnNuevoContacto.setCaption("Nuevo");
		btnNuevoContacto.setImmediate(true);
		btnNuevoContacto.setWidth("120px");
		btnNuevoContacto.setHeight("-1px");
		gridLayout_1.addComponent(btnNuevoContacto, 0, 0);
		
		// btnImportar
		btnImportar = new NativeButton();
		btnImportar.setCaption("Importar");
		btnImportar.setImmediate(true);
		btnImportar.setWidth("120px");
		btnImportar.setHeight("-1px");
		gridLayout_1.addComponent(btnImportar, 1, 0);
		
		// btnEditar
		btnEditar = new NativeButton();
		btnEditar.setCaption("Editar");
		btnEditar.setImmediate(true);
		btnEditar.setWidth("120px");
		btnEditar.setHeight("-1px");
		gridLayout_1.addComponent(btnEditar, 2, 0);

		// btnComponer
		btnComponer = new NativeButton();
		btnComponer.setCaption("Componer Msje");
		btnComponer.setImmediate(true);
		btnComponer.setWidth("120px");
		btnComponer.setHeight("-1px");
		gridLayout_1.addComponent(btnComponer, 3, 0);
		
		return gridLayout_1;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("100.0%");
		horizontalLayout_1.setHeight("452px");
		horizontalLayout_1.setMargin(false);
		
		// tbl_contactos
		tbl_contactos = new Table();
		tbl_contactos.setImmediate(false);
		tbl_contactos.setWidth("100.0%");
		tbl_contactos.setHeight("100.0%");
		tbl_contactos.setVisible(true);
		tbl_contactos.setSelectable(true);
		tbl_contactos.setMultiSelectMode(MultiSelectMode.SIMPLE);
		tbl_contactos.setMultiSelect(true);

		horizontalLayout_1.addComponent(tbl_contactos);

		return horizontalLayout_1;
	}

	private String celulares(ArrayList lista) {
		String lstcell = new String();
		for(int i=0; i <  lista.size();i++) {
			lstcell = lstcell + "," + lista.get(i).toString();

		}

		return lstcell.substring(1);
	}
	

}
